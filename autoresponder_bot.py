
import re
import imaplib
import email
from email.header import decode_header
import telebot
import requests
import json
from typing import Dict, List, Optional
import time
import logging
import os
from dotenv import load_dotenv
import threading
from pathlib import Path
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = logging.DEBUG if os.getenv('DEBUG') else logging.INFO
logging.basicConfig(
    level=log_level,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class PyrusAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pyrus CRM API"""

    def __init__(self, login: str, security_key: str):
        self.login = login
        self.security_key = security_key
        self.base_url = "https://api.pyrus.com/v4"
        self.auth_token = None
        self.authenticate()

    def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Pyrus API"""
        try:
            auth_url = f"{self.base_url}/auth"
            auth_data = {
                "login": self.login,
                "security_key": self.security_key
            }

            response = requests.post(auth_url, json=auth_data)

            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get('access_token')
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Pyrus CRM")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Pyrus: {response.status_code}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Pyrus: {e}")
            return False

    def create_task(self, form_id: int, task_data: Dict) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ Pyrus CRM"""
        try:
            if not self.auth_token:
                logger.error("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Pyrus")
                return None

            create_url = f"{self.base_url}/tasks"
            headers = {
                'Authorization': f'Bearer {self.auth_token}',
                'Content-Type': 'application/json'
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            task_payload = {
                "form_id": form_id,
                "text": f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                "fields": []
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
            for field_name, value in task_data.items():
                task_payload["fields"].append({
                    "name": field_name,
                    "value": str(value)
                })

            response = requests.post(create_url, json=task_payload, headers=headers)

            if response.status_code == 200:
                data = response.json()
                task_id = data.get('task', {}).get('id')
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ Pyrus CRM: {task_id}")
                return str(task_id)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Pyrus: {response.status_code} - {response.text}")
                return None

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Pyrus: {e}")
            return None

class GreenAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Green API WhatsApp"""

    def __init__(self, instance_id: str, api_token: str):
        self.instance_id = instance_id
        self.api_token = api_token
        self.base_url = f"https://api.green-api.com/waInstance{instance_id}"

    def get_state_instance(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞ WhatsApp"""
        try:
            url = f"{self.base_url}/getStateInstance/{self.api_token}"
            response = requests.get(url, timeout=30)

            if response.status_code == 200:
                data = response.json()
                state = data.get('stateInstance')
                logger.info(f"üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ WhatsApp –∏–Ω—Å—Ç–∞–Ω—Å–∞: {state}")
                return state == 'authorized'
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è WhatsApp: {response.status_code}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è WhatsApp: {e}")
            return False

    def send_message(self, phone: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WhatsApp"""
        try:
            url = f"{self.base_url}/sendMessage/{self.api_token}"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Green API
            formatted_phone = self.format_phone_number(phone)

            payload = {
                "chatId": f"{formatted_phone}@c.us",
                "message": message
            }

            response = requests.post(url, json=payload, timeout=30)

            if response.status_code == 200:
                data = response.json()
                if data.get('idMessage'):
                    logger.info(f"‚úÖ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}")
                    return True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
                    return False
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Green API: {response.status_code} - {response.text}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def format_phone_number(self, phone: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Green API"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        cleaned = re.sub(r'[^\d+]', '', phone)

        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
        if cleaned.startswith('8'):
            cleaned = '7' + cleaned[1:]
        elif cleaned.startswith('+7'):
            cleaned = cleaned[1:]
        elif cleaned.startswith('+'):
            cleaned = cleaned[1:]
        elif not cleaned.startswith('7'):
            cleaned = '7' + cleaned

        return cleaned

class AutoResponderBot:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Pyrus CRM –∏ Green API
    """

    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.config = self.load_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot API
        if self.config.get('telegram_bot_token'):
            try:
                self.telegram_bot = telebot.TeleBot(self.config['telegram_bot_token'])
                self.setup_telegram_handlers()
                logger.info("‚úÖ Telegram Bot API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot: {e}")
                self.telegram_bot = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrus CRM API
        if self.config.get('pyrus_login') and self.config.get('pyrus_security_key'):
            try:
                self.pyrus_api = PyrusAPI(
                    self.config['pyrus_login'],
                    self.config['pyrus_security_key']
                )
                logger.info("‚úÖ Pyrus CRM API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pyrus CRM: {e}")
                self.pyrus_api = None
        else:
            self.pyrus_api = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Green API –¥–ª—è WhatsApp
        if self.config.get('green_api_instance_id') and self.config.get('green_api_token'):
            try:
                self.green_api = GreenAPI(
                    self.config['green_api_instance_id'],
                    self.config['green_api_token']
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ WhatsApp –∏–Ω—Å—Ç–∞–Ω—Å–∞
                if self.green_api.get_state_instance():
                    logger.info("‚úÖ Green API WhatsApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                else:
                    logger.warning("‚ö†Ô∏è Green API –∏–Ω—Å—Ç–∞–Ω—Å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Green API: {e}")
                self.green_api = None
        else:
            self.green_api = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è email
        self.email_config = self.config.get('email', {})

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            'processed_applications': 0,
            'sent_whatsapp': 0,
            'sent_telegram': 0,
            'created_crm_tasks': 0,
            'errors': 0
        }

        # –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_templates = {
            'house': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –° –í–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è ¬´–°—Ä—É–±–∏–º¬ª.\n–†–∞–¥—ã –±—É–¥–µ–º –æ–±—Å—É–¥–∏—Ç—å –í–∞—à–∏ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –±—É–¥—É—â–µ–º—É –¥–æ–º—É –∑–¥–µ—Å—å –∏–ª–∏ –≥–æ—Ç–æ–≤—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É –≤ –æ—Ñ–∏—Å–µ.",
            'bath': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –° –í–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è ¬´–°—Ä—É–±–∏–º¬ª.\n–†–∞–¥—ã –±—É–¥–µ–º –æ–±—Å—É–¥–∏—Ç—å –í–∞—à–∏ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –±—É–¥—É—â–µ–π –±–∞–Ω–µ –∑–¥–µ—Å—å –∏–ª–∏ –≥–æ—Ç–æ–≤—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É –≤ –æ—Ñ–∏—Å–µ.",
            'general_request': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –° –í–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è ¬´–°—Ä—É–±–∏–º¬ª.\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–µ—Ä–Ω–µ–º—Å—è –∫ –í–∞–º —Å –æ—Ç–≤–µ—Ç–æ–º."
        }

    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return {
            # Telegram Bot API Token
            'telegram_bot_token': os.getenv('TELEGRAM_BOT_TOKEN'),

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email
            'email': {
                'imap_server': os.getenv('EMAIL_IMAP_SERVER', 'imap.gmail.com'),
                'username': os.getenv('EMAIL_USERNAME'),
                'password': os.getenv('EMAIL_PASSWORD')
            },

            # Green API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è WhatsApp
            'green_api_instance_id': os.getenv('GREEN_API_INSTANCE_ID'),
            'green_api_token': os.getenv('GREEN_API_TOKEN'),

            # Pyrus CRM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'pyrus_login': os.getenv('PYRUS_LOGIN'),
            'pyrus_security_key': os.getenv('PYRUS_SECURITY_KEY'),
            'pyrus_form_id': int(os.getenv('PYRUS_FORM_ID', '0')),

            # –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'debug': os.getenv('DEBUG', 'false').lower() == 'true',
            'check_interval': int(os.getenv('CHECK_INTERVAL', '60'))
        }

    def setup_telegram_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞"""

        @self.telegram_bot.message_handler(commands=['start', 'help'])
        def send_welcome(message):
            welcome_text = """
ü§ñ –ë–æ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ "–°—Ä—É–±–∏–º"

–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞–º.

üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
‚úÖ Telegram Bot API
‚úÖ Green API (WhatsApp)
‚úÖ Pyrus CRM
‚úÖ Email (IMAP)

–ö–æ–º–∞–Ω–¥—ã:
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
/test_whatsapp <–Ω–æ–º–µ—Ä> - –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp
/help - –≠—Ç–∞ –ø–æ–º–æ—â—å
            """
            self.telegram_bot.reply_to(message, welcome_text)

        @self.telegram_bot.message_handler(commands=['stats'])
        def send_stats(message):
            stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:

‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: {self.stats['processed_applications']}
üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ WhatsApp: {self.stats['sent_whatsapp']}
üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram: {self.stats['sent_telegram']}
üìã –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á –≤ CRM: {self.stats['created_crm_tasks']}
‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self.get_uptime()}
            """
            self.telegram_bot.reply_to(message, stats_text)

        @self.telegram_bot.message_handler(commands=['health'])
        def health_check(message):
            status = "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
            checks = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Green API
            if self.green_api and self.green_api.get_state_instance():
                checks.append("‚úÖ Green API WhatsApp - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            elif self.green_api:
                checks.append("‚ö†Ô∏è Green API WhatsApp - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            else:
                checks.append("‚ùå Green API WhatsApp - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Pyrus CRM
            if self.pyrus_api and self.pyrus_api.auth_token:
                checks.append("‚úÖ Pyrus CRM - –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                checks.append("‚ùå Pyrus CRM - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Email
            if all(self.email_config.values()):
                checks.append("‚úÖ Email IMAP - –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                checks.append("‚ùå Email IMAP - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            health_text = f"{status}\n\n" + "\n".join(checks)
            self.telegram_bot.reply_to(message, health_text)

        @self.telegram_bot.message_handler(commands=['test_whatsapp'])
        def test_whatsapp(message):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                parts = message.text.split(' ', 1)
                if len(parts) < 2:
                    self.telegram_bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: /test_whatsapp +79001234567")
                    return

                phone = parts[1]
                test_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–°—Ä—É–±–∏–º¬ª"

                if self.green_api:
                    if self.green_api.send_message(phone, test_message):
                        self.telegram_bot.reply_to(message, f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}")
                    else:
                        self.telegram_bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {phone}")
                else:
                    self.telegram_bot.reply_to(message, "‚ùå Green API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            except Exception as e:
                self.telegram_bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

        @self.telegram_bot.message_handler(func=lambda message: True)
        def handle_message(message):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–æ–π
            if self.is_application_message(message.text):
                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –≤ Telegram –æ—Ç {message.from_user.username or 'Unknown'}")
                application_data = self.parse_application(message.text)
                if application_data:
                    success = self.process_application(application_data)
                    if success:
                        self.telegram_bot.reply_to(message, "‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É")
                    else:
                        self.telegram_bot.reply_to(message, "‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ")
                else:
                    self.telegram_bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É")

    def get_uptime(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if not hasattr(self, 'start_time'):
            self.start_time = datetime.now()

        uptime = datetime.now() - self.start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, _ = divmod(remainder, 60)

        return f"{days}–¥ {hours}—á {minutes}–º"

    def is_application_message(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–æ–π —Å —Å–∞–π—Ç–∞"""
        if not text:
            return False

        patterns = [
            r"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ \d+",
            r"–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã: (Application|–ó–∞—è–≤–∫–∞)",
            r"–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:",
            r"–¢–µ–ª–µ—Ñ–æ–Ω: [+\d\s\(\)\-]+",
            r"–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
        ]

        matches = 0
        for pattern in patterns:
            if re.search(pattern, text, re.IGNORECASE):
                matches += 1

        # –°—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–æ–π, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ö–æ—Ç—è –±—ã 2 –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        return matches >= 2

    def parse_application(self, text: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –∑–∞—è–≤–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            data = {}

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            application_number_match = re.search(r"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ (\d+)", text)
            if application_number_match:
                data['application_number'] = application_number_match.group(1)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_patterns = [
                r"–¢–µ–ª–µ—Ñ–æ–Ω: ([+\d\s\(\)\-]+)",
                r"—Ç–µ–ª[\.:][\s]*([+\d\s\(\)\-]+)",
                r"—Ç–µ–ª–µ—Ñ–æ–Ω[\.:][\s]*([+\d\s\(\)\-]+)"
            ]

            for pattern in phone_patterns:
                phone_match = re.search(pattern, text, re.IGNORECASE)
                if phone_match:
                    data['phone'] = phone_match.group(1).strip()
                    break

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (–¥–æ–º –∏–ª–∏ –±–∞–Ω—è)
            house_keywords = ['–¥–æ–º', '–∫–æ—Ç—Ç–µ–¥–∂', '–¥–æ–º–∏–∫', 'house']
            bath_keywords = ['–±–∞–Ω', '—Å–∞—É–Ω–∞', '–ø–∞—Ä–∏–ª–∫–∞', 'bath', 'sauna']

            text_lower = text.lower()

            if any(keyword in text_lower for keyword in house_keywords):
                data['object_type'] = 'house'
                data['object_description'] = '–¥–æ–º'
            elif any(keyword in text_lower for keyword in bath_keywords):
                data['object_type'] = 'bath'
                data['object_description'] = '–±–∞–Ω—è'
            else:
                data['object_type'] = 'house'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–º
                data['object_description'] = '–¥–æ–º'

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–æ—â–∞–¥—å —Å—Ç—Ä–æ–µ–Ω–∏—è
            area_match = re.search(r"–ü–ª–æ—â–∞–¥—å —Å—Ç—Ä–æ–µ–Ω–∏—è: ([^\n]+)", text)
            if area_match:
                data['area'] = area_match.group(1).strip()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—é–¥–∂–µ—Ç
            budget_match = re.search(r"–±—é–¥–∂–µ—Ç[^:]*: ([^\n]+)", text, re.IGNORECASE)
            if budget_match:
                data['budget'] = budget_match.group(1).strip()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–∞—Å—Ç–∫–∞
            land_match = re.search(r"–∑–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫[^:]*: ([^\n]+)", text, re.IGNORECASE)
            if land_match:
                data['has_land'] = land_match.group(1).strip()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏
            contact_patterns = [
                (r"whatsapp", 'whatsapp'),
                (r"telegram", 'telegram'),
                (r"–æ–∑–≤—É—á–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", 'phone_call'),
                (r"–ø–æ–∑–≤–æ–Ω–∏—Ç—å", 'phone_call')
            ]

            for pattern, method in contact_patterns:
                if re.search(pattern, text, re.IGNORECASE):
                    data['contact_method'] = method
                    break
            else:
                data['contact_method'] = 'whatsapp'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é WhatsApp

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º—ã
            form_match = re.search(r"–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã: (Application|–ó–∞—è–≤–∫–∞)", text, re.IGNORECASE)
            if form_match:
                data['form_type'] = form_match.group(1).lower()
            else:
                data['form_type'] = 'application'

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            data['created_at'] = datetime.now().isoformat()

            logger.info(f"üìã –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {data}")
            return data if data.get('phone') else None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞—è–≤–∫–∏: {e}")
            self.stats['errors'] += 1
            return None

    def process_application(self, data: Dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            success_count = 0
            total_actions = 3  # WhatsApp/Telegram, CRM, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞—è–≤–∫–∏ —Å —Å–ø–æ—Å–æ–±–æ–º —Å–≤—è–∑–∏ "–æ–∑–≤—É—á–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
            if data.get('contact_method') == 'phone_call':
                logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞—è–≤–∫—É —Å —Å–ø–æ—Å–æ–±–æ–º —Å–≤—è–∑–∏ '–æ–∑–≤—É—á–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É'")
                return True

            # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Pyrus CRM
            if self.pyrus_api and self.config.get('pyrus_form_id'):
                crm_data = {
                    '–¢–µ–ª–µ—Ñ–æ–Ω': data.get('phone', ''),
                    '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞': data.get('object_description', ''),
                    '–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏': data.get('contact_method', ''),
                    '–ü–ª–æ—â–∞–¥—å': data.get('area', ''),
                    '–ë—é–¥–∂–µ—Ç': data.get('budget', ''),
                    '–£—á–∞—Å—Ç–æ–∫': data.get('has_land', ''),
                    '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏': data.get('application_number', ''),
                    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': data.get('created_at', '')
                }

                task_id = self.pyrus_api.create_task(self.config['pyrus_form_id'], crm_data)
                if task_id:
                    success_count += 1
                    self.stats['created_crm_tasks'] += 1
                    data['crm_task_id'] = task_id

            # 2. –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
            if data.get('form_type') == '–∑–∞—è–≤–∫–∞':
                message_template = self.message_templates['general_request']
            else:
                object_type = data.get('object_type', 'house')
                message_template = self.message_templates.get(object_type, self.message_templates['house'])

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
            contact_method = data.get('contact_method')
            phone = data.get('phone')

            message_sent = False

            if contact_method == 'whatsapp' and phone and self.green_api:
                if self.green_api.send_message(phone, message_template):
                    success_count += 1
                    self.stats['sent_whatsapp'] += 1
                    message_sent = True
            elif contact_method == 'telegram' and phone:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram User API
                logger.info(f"üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –Ω–∞ {phone}: {message_template}")
                # –ó–∞–≥–ª—É—à–∫–∞ - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                success_count += 1
                self.stats['sent_telegram'] += 1
                message_sent = True

            # 4. –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if message_sent or data.get('crm_task_id'):
                self.stats['processed_applications'] += 1
                success_count += 1

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            success_ratio = success_count / total_actions
            is_successful = success_ratio >= 0.5  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ö–æ—Ç—è –±—ã 50%

            if is_successful:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞—è–≤–∫–∞ ({success_count}/{total_actions}): {data}")
            else:
                logger.warning(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞—è–≤–∫–∞ ({success_count}/{total_actions}): {data}")
                self.stats['errors'] += 1

            return is_successful

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            self.stats['errors'] += 1
            return False

    def check_email(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –≤ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ"""
        try:
            if not all(self.email_config.values()):
                return

            imap_server = self.email_config.get('imap_server')
            username = self.email_config.get('username')
            password = self.email_config.get('password')

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
            imap = imaplib.IMAP4_SSL(imap_server)
            imap.login(username, password)
            imap.select("INBOX")

            # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
            status, messages = imap.search(None, "UNSEEN")

            if status == "OK" and messages[0]:
                message_ids = messages[0].split()
                logger.info(f"üìß –ù–∞–π–¥–µ–Ω–æ {len(message_ids)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º")

                for msg_id in message_ids:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                    status, msg_data = imap.fetch(msg_id, "(RFC822)")

                    if status == "OK":
                        email_body = msg_data[0][1]
                        email_message = email.message_from_bytes(email_body)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Å—å–º–æ –∑–∞—è–≤–∫–æ–π
                        subject = email_message.get("Subject", "")
                        body = self.get_email_body(email_message)

                        full_text = f"{subject} {body}"

                        if self.is_application_message(full_text):
                            logger.info(f"üìß –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –ø–æ email: {subject}")
                            application_data = self.parse_application(full_text)
                            if application_data:
                                self.process_application(application_data)

                        # –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                        imap.store(msg_id, '+FLAGS', '\\Seen')

            imap.close()
            imap.logout()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email: {e}")
            self.stats['errors'] += 1

    def get_email_body(self, email_message) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–∏—Å—å–º–∞"""
        try:
            body = ""

            if email_message.is_multipart():
                for part in email_message.walk():
                    content_type = part.get_content_type()
                    content_disposition = str(part.get("Content-Disposition"))

                    if content_type == "text/plain" and "attachment" not in content_disposition:
                        body = part.get_payload(decode=True).decode('utf-8', errors='ignore')
                        break
            else:
                body = email_message.get_payload(decode=True).decode('utf-8', errors='ignore')

            return body

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞: {e}")
            return ""

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞...")
        self.start_time = datetime.now()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_warnings = []

            if not self.config.get('telegram_bot_token'):
                config_warnings.append("‚ö†Ô∏è Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            if not all(self.email_config.values()):
                config_warnings.append("‚ö†Ô∏è Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–æ–ª–Ω—ã–µ")

            if not self.green_api:
                config_warnings.append("‚ö†Ô∏è Green API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            if not self.pyrus_api:
                config_warnings.append("‚ö†Ô∏è Pyrus CRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            if config_warnings:
                logger.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
                for warning in config_warnings:
                    logger.warning(warning)

            # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            if hasattr(self, 'telegram_bot') and self.telegram_bot:
                telegram_thread = threading.Thread(
                    target=self.telegram_bot.polling, 
                    kwargs={'none_stop': True, 'timeout': 60}
                )
                telegram_thread.daemon = True
                telegram_thread.start()
                logger.info("‚úÖ Telegram Bot –∑–∞–ø—É—â–µ–Ω")

            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
            check_interval = self.config.get('check_interval', 60)
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É email –∫–∞–∂–¥—ã–µ {check_interval} —Å–µ–∫—É–Ω–¥")

            while True:
                try:
                    self.check_email()

                    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
                    if hasattr(self, 'check_count'):
                        self.check_count += 1
                    else:
                        self.check_count = 1

                    if self.check_count % 10 == 0:
                        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.stats['processed_applications']} –∑–∞—è–≤–æ–∫, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self.get_uptime()}")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ email: {e}")
                    self.stats['errors'] += 1

                time.sleep(check_interval)

        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Path("logs").mkdir(exist_ok=True)
    Path("data").mkdir(exist_ok=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not Path(".env").exists():
        logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ config_example.env –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        print("\nüîß –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:")
        print("1. cp config_example.env .env")
        print("2. nano .env  # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("3. python autoresponder_bot.py")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot = AutoResponderBot()
        bot.run()
    except Exception as e:
        logger.error(f"üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
